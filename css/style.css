/* No need to include the '_' or '.scss' for importing the _base.scss */
@keyframes moveInLeft {
  0% {
    /* 0% means that it will be in the background */
    opacity: 0;
    /* it will start from the left */
    transform: translateX(-100rem); }
  /* This will rotate the element 180degrees
    60% {
        transform: rotate(180deg);
    } */
  80% {
    transform: translateX(1rem); }
  100% {
    /* 100% means it will be fully displayed */
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    /* 0% means that it will be in the background */
    opacity: 0;
    /* it will start from the left */
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    /* 100% means it will be fully displayed */
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    /* 0% means that it will be in the background */
    opacity: 0;
    /* it will start from the left */
    transform: translateY(3rem); }
  100% {
    /* 100% means it will be fully displayed */
    opacity: 1;
    transform: translate(0); } }

/* Perform a basic reset using Universal Selector(*) - Global Reset.  We also want to include the AFTER and BEFORE psuedo elements so they can get the properties as well. */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* The BODY will have box-sizing: border-box.  By setting it to INHERIT here, this means that every child of the BODY will inherit the value of box-sizing */
  box-sizing: inherit; }

/* Setting the ROOT FONT SIZE */
html {
  /* 1 rem = 10px.  If we set the root font-size to 10px, the user will not be able to change their font-size.  This is a problem if the user have bad eyesight and want to make the text bigger.
    font-size: 10px;
    */
  /* The default font size of our browser is 16px.  We want to set it to 10px.  10 / 16 = 0.625 which is 62.5% */
  font-size: 62.5%; }

/* Every child of the body will inherit the properties specified here */
body {
  /* Changes the box model so that the borders and padding are not added to the total height or total width of the element */
  box-sizing: border-box; }

/* Every child of the body will inherit the properties specified here */
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* this is a trick to fix the animation that is a little shakey.  No one knows why this happens but this will fix the issue. */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* animation-timing-function: ease, ease-in, ease-out, ease-in-out, linear, step-start, step-end */
    /* happens 3 times */
    /* animation-iteration-count: 3; */
    /* animation-delay: 3s; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    /* spaces out the text so that it can be lined up with other elements  */
    letter-spacing: 1.75rem;
    /* short hand way of using animation. */
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  /* make the gradient only till the text ends "EXITING TOURS FOR ADVENTUROUS PEOPLE.  It is a BLOCK element by default.  We need to change it to INLINE-BLOCK */
  display: inline-block;
  /* sets the background gradient. */
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  /* The background gets clipped where the TEXT is. */
  -webkit-background-clip: text;
  /* This will make the gradient behind the text. We set the COLOR:TRANSPARENT so that we don't see the text, however we see the background. */
  color: transparent;
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.section-about {
  background-color: #f7f7f7;
  padding: 25em 0;
  margin-top: -20vh; }

.btn {
  /* we want the btn visited to stay the same color and not change once we have clicked it */
  /* ACTIVE means when we click the button */
  /* AFTER psuedo element is treated as a child of the button  */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* the button is an inline element.  we change it to inline-block because we want to get on padding, height,width to elements */
    display: inline-block;
    border-radius: 10rem;
    /* shorthand way - will make the button take .2 seconds when clicked and unclicked  */
    transition: all .2s;
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-3px);
    /* 0 - X, 5px - Y, 10px - Blur of the shadow, rgba is BLACK with and OPACITY of 0.2 (20%) */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* AFTER psuedo element only when the button is hovered  */ }
    .btn:hover::after {
      /* increases the size of the button  */
      transform: scaleX(1.4) scaleY(1.6);
      /* fades out the animation where the scale is not seen after hovering */
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    /* CONTENT is ALWAYS needed in order for the psuedo after element to appear */
    content: "";
    /* set the display to inline-block because the button is also an inline-block  */
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* position absolute here and set the position relative in the &:link, &:visited */
    position: absolute;
    top: 0;
    left: 0;
    /* places the element behind the button  */
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    /* .75s is the delay */
    animation: moveInBottom .5s ease-out .75s;
    /* will be not visible at first, then will be visible  */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  /* display: inline-block so that we can use the box model properties such as padding, margin, etc. */
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  /* we want the trasform property in &:hover to be animated */
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0px); }

.composition {
  position: relative;
  /* makes the images that are NOT HOVERED shrink in size - scale(.9) */ }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    position: absolute;
    /* set this to a number.  Set the :hover z-index to a value higher than this value so that it will be on top */
    z-index: 10;
    /* for the animations, we transition ALL for .2seconds */
    transition: all .2s;
    /* Will create a space between the border outline and the image */
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      /* z-index here is set to a higher value than the one set in the &__photo so that it will be on top when hovered. */
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.row {
  max-width: 114rem;
  /* Center the row in the viewport.  This will center a block element inside of another block element.  Here '0' is for the top and bottom margin and left and right is AUTO.  Setting it to AUTO means that the browser will automatically calculate the left and right margin which will result in the element being CENTERED. */
  margin: 0 auto;
  /* We want the last div to not have a margin-bottom. Use the :not() psuedo operator. :not(:last-child) means that we select everything except the last child.  This means that all other elements will have a margin-bottom except the last child. */
  /* Attribute Selector [].  We want to select by CLASS attribute.
    ^ - means START WITH.  We want all CLASS that starts with COL-
    * - select any CLASS that contains COL-
    $ - select all CLASS that ends with COL- */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    /* BOTH = it will clear float: left and float:right */
    clear: both; }
  .row [class^="col-"] {
    float: left;
    /* Every element except the last-child will have a margin-right */ }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.header {
  /* header will be 95% of the viewport height  */
  height: 95vh;
  /* We have 2 background image.  The first is linear-gradient and underneath is hero.jpg.  'to right' means that the gradient goes to the right bottom.  Move the opacity of the colors to 0.8 so that the hero.jpg image is visible */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* Cover - means that whatever the width of the viewport or the element, it will always try to fit the element inside the box  */
  background-size: cover;
  /* When you resize the window, the top of the image will stay the same and will not get cropped */
  background-position: top;
  /* need to set to relative because the child element (.logo-box) has the position: absolute */
  position: relative;
  /* makes the header into a polygon (values on each of the 4 corners) 
    polygon(x y, x y, x y) - polygon(top-left, top-right, bottom-right, bottom-left) */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* since we are using position: absolute, we need to set the parent element of .logo-box which is .header to position: relative */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    /* Only need to specify the height and the width will scale automatically  */
    height: 3.5rem; }
  .header__text-box {
    /* We want this to be centered at all times.  Responsive.  */
    position: absolute;
    top: 40%;
    left: 50%;
    /* this will center (horizontally and vertically) the text-box in the middle of the screen  */
    transform: translate(-50%, -50%);
    /* this will align the button to the center (including the button) */
    text-align: center; }
